plt.legend(loc='best')
Arbitrary functions can be applied along the axes of a DataFrame using the apply() method,

tsdf.agg({'A': ['mean', 'min'], 'B': 'sum'})
Out[170]: 
             A        B
mean -0.019676      NaN
min  -0.522441      NaN
sum        NaN  2.89642


tsdf.transform([np.abs, lambda x: x + 1])
Out[188]: 
                   A                   B                   C          
            absolute  <lambda>  absolute  <lambda>  absolute  <lambda>
2000-01-01  1.219234 -0.219234  1.652700 -0.652700  0.698277  0.301723
2000-01-02  1.858653  2.858653  0.738520  0.261480  0.630364  1.630364
2000-01-03  0.112596  0.887404  1.525897  2.525897  1.364225  2.364225
2000-01-04       NaN       NaN       NaN       NaN       NaN       NaN
2000-01-05       NaN       NaN       NaN       NaN       NaN       NaN
2000-01-06       NaN       NaN       NaN       NaN       NaN       NaN
2000-01-07       NaN       NaN       NaN       NaN       NaN       NaN
2000-01-08  0.527790  0.472210  1.715506 -0.715506  0.387274  1.387274
2000-01-09  0.569341  0.430659  0.569386  1.569386  0.134136  1.134136
2000-01-10  0.413993  0.586007  0.862280  0.137720  0.662690  1.662690


In [61]: df['one']
Out[61]: 
a    1.0
b    2.0
c    3.0
d    NaN
Name: one, dtype: float64

In [62]: df['three'] = df['one'] * df['two']

In [63]: df['flag'] = df['one'] > 2

In [64]: df
Out[64]: 
   one  two  three   flag
a  1.0  1.0    1.0  False
b  2.0  2.0    4.0  False
c  3.0  3.0    9.0   True
d  NaN  4.0    NaN  False


 (iris.assign(sepal_ratio=iris['SepalWidth'] / iris['SepalLength'])
   ....:      .head())
   ....: 
Out[76]: 
   SepalLength  SepalWidth  PetalLength  PetalWidth         Name  sepal_ratio
0          5.1         3.5          1.4         0.2  Iris-setosa     0.686275
1          4.9         3.0          1.4         0.2  Iris-setosa     0.612245
2          4.7         3.2          1.3         0.2  Iris-setosa     0.680851
3          4.6         3.1          1.5         0.2  Iris-setosa     0.673913
4          5.0         3.6          1.4         0.2  Iris-setosa     0.720000


In [88]: df - df.iloc[0]
Out[88]: 
          A         B         C         D
0  0.000000  0.000000  0.000000  0.000000
1 -1.359261 -0.248717 -0.453372 -1.754659
2  0.253128  0.829678  0.010026 -1.991234
3 -1.311128  0.054325 -1.724913 -1.620544
4  0.573025  1.500742 -0.676070  1.367331
5 -1.741248  0.781993 -1.241620 -2.053136
6 -1.240774 -0.869551 -0.153282  0.000430
7 -0.743894  0.411013 -0.929563 -0.282386
8 -1.194921  1.320690  0.238224 -1.482644
9  2.293786  1.856228  0.773289 -1.446531


rouping and Summarizing
R	pandas
summary(df)	df.describe()
gdf <- group_by(df, col1)	gdf = df.groupby('col1')
summarise(gdf, avg=mean(col1, na.rm=TRUE))	df.groupby('col1').agg({'col1': 'mean'})
summarise(gdf, total=sum(col1))	df.groupby('col1').sum()



tips.groupby('day').agg({'tip': np.mean, 'day': np.size})
Out[20]: 
           tip  day
day                
Fri   2.734737   19
Sat   2.993103   87
Sun   3.255132   76
Thur  2.771452   62



tips.groupby(['smoker', 'day']).agg({'tip': [np.size, np.mean]})
Out[21]: 
              tip          
             size      mean
smoker day                 
No     Fri    4.0  2.812500
       Sat   45.0  3.102889
       Sun   57.0  3.167895
       Thur  45.0  2.673778
Yes    Fri   15.0  2.714000
       Sat   42.0  2.875476
       Sun   19.0  3.516842
       Thur  17.0  3.030000
	   

ver.loan_purpose_name.value_counts().plot(kind='barh')

ver.groupby('agency_abbr')['applicant_income_000s'].agg(np.median).plot(kind = 'bar')

g = sns.factorplot("loan_purpose_name", "loan_amount_000s", "agency_abbr", ver, kind="box",                        
                   palette="PRGn",aspect=2.25)
g.set(ylim=(0, 600))


sns.factorplot("loan_purpose_name", data=ver, hue="agency_abbr",size=3,aspect=2)

sns.factorplot("loan_purpose_name", data=ver, hue="action_taken_name");



